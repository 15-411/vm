# Syntax for Abstract Assembly Files in BNF Form

Note that when a character / string is surrounded by quotes, it indicates that it is a token that is necessary for parsing. Spaces indicate gaps or potential whitespace, which might include newlines.

# Comments are lines that start with "//"


# Represents the Entire File
file = fn*

# Function
fn = id temp* "\n" instr* branch
   | id temp* "\n" block*

# Basic Block
block = block_id "\n" instr* branch
      | block_id ":" block_id* instr* branch

# Instructions
instr = temp "=" oper                     "\n"
      | temp "=" unop oper                "\n"
      | temp "=" oper binop oper          "\n"
      | temp "=" "phi" temp*              "\n"

# Branch Condition / Operation
branch = "ret" oper                       "\n"
       | "ret" 				  "\n"
       | "jmp" branch_id                  "\n"
       | "if" oper branch_id branch_id    "\n"



# Operands
oper = temp | const

# A temporary or register
temp = "#" uint

# Name of a Block
block_id = "@" uint

# A Name or id
id = [a-zA-Z_][a-zA-Z0-9_]*

# An Integer Number Value
const = (-?)(0 | [1-9][0-9]*)
      | 0[xX][0-9a-fA-F]+

# Natural Number / Unsigned Integer
uint = 0 | [1-9][0-9]*


# Unary Operations
unop = "-" | "~" | "!"

# Binary Operations
binop = "+"     # Add
      | "-"     # Subtract
      | "*"     # Multiply
      | "/"     # Divide
      | "%"     # Mod
      | "<<"    # Arithmetic Left Shift
      | ">>"    # Arithmetic Right Shift
      | ">>>"   # Logical Right Shift
      | "=="    # Equality
      | "!="    # Inequality
      | "<"     # Less Than
      | "<="    # Less Than or Equal
      | ">"     # Greater Than
      | ">="    # Greater Than or Equal
      | "||"    # Logical Or
      | "&&"    # Logical And
      | "|"     # Bitwise Or
      | "^"     # Bitwise Xor
      | "&"     # Bitwise And
